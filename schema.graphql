type NewAdmin @entity(immutable: true) {
  id: Bytes!
  oldAdmin: Bytes! # address
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewImplementation @entity(immutable: true) {
  id: Bytes!
  oldImplementation: Bytes! # address
  newImplementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewPendingAdmin @entity(immutable: true) {
  id: Bytes!
  oldPendingAdmin: Bytes! # address
  newPendingAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCanceled @entity(immutable: true) {
  """
  Record ID.

  A proposal can only be cancelled once, so the record ID can be the proposal ID and not have any clashes.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type ProposalCreated @entity(immutable: true) {
  """
  Record ID.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  proposer: Bytes! # address
  targets: [Bytes!]! # address[]
  values: [BigInt!]! # uint256[]
  signatures: [String!]! # string[]
  calldatas: [Bytes!]! # bytes[]
  startBlock: BigInt! # uint256
  description: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  cancelled: ProposalCanceled @derivedFrom(field: "proposal")
  executed: ProposalExecuted @derivedFrom(field: "proposal")
  queued: ProposalQueued @derivedFrom(field: "proposal")
  vetoed: ProposalVetoed @derivedFrom(field: "proposal")
  votingStarted: ProposalVotingStarted @derivedFrom(field: "proposal")
  votes: [VoteCast!] @derivedFrom(field: "proposal")
}

type ProposalExecuted @entity(immutable: true) {
  """
  Record ID.

  A proposal can only be executed once, so the record ID can be the proposal ID and not have any clashes.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type ProposalQueued @entity(immutable: true) {
  """
  Record ID.

  A proposal can only be queued once, so the record ID can be the proposal ID and not have any clashes.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  eta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type ProposalThresholdSet @entity(immutable: true) {
  id: Bytes!
  oldProposalThreshold: BigInt! # uint256
  newProposalThreshold: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalVetoed @entity(immutable: true) {
  """
  Record ID.

  A proposal can only be vetoed once, so the record ID can be the proposal ID and not have any clashes.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type ProposalVotingStarted @entity(immutable: true) {
  """
  Record ID.

  A proposal can only have voting started once, so the record ID can be the proposal ID and not have any clashes.

  Format: `{proposalId}`
  """
  id: String!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type VetoGuardianSet @entity(immutable: true) {
  id: Bytes!
  oldGuardian: Bytes! # address
  newGuardian: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteCast @entity(immutable: true) {
  """
  Record ID.

  Format: `{proposalId}-{voter}-{transactionHash}-{logIndex}`
  """
  id: String!
  voter: Bytes! # address
  proposalId: BigInt! # uint256
  support: Int! # uint8
  votes: BigInt! # uint256
  reason: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposal: ProposalCreated!
}

type VotingDelaySet @entity(immutable: true) {
  id: Bytes!
  oldVotingDelay: BigInt! # uint256
  newVotingDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotingPeriodSet @entity(immutable: true) {
  id: Bytes!
  oldVotingPeriod: BigInt! # uint256
  newVotingPeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WhitelistAccountExpirationSet @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  expiration: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WhitelistGuardianSet @entity(immutable: true) {
  id: Bytes!
  oldGuardian: Bytes! # address
  newGuardian: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
